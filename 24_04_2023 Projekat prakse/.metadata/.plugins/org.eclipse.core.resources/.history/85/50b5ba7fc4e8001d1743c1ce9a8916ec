package praksa;

import java.util.*;
import java.util.regex.*;

public class GoT {

	private Map<Character, List<Message>> characterMessages;
	private List<CharacterData> characterDataList;
	
	GoT(){
		this.characterMessages = new HashMap<Character, List<Message>>();
		this.characterDataList = new ArrayList<CharacterData>();
	}
	
	public void load() {
		
		String metaData = FileHelper.loadMetaData();
		String[] lines = metaData.split(System.lineSeparator());
		
		for(int i = 1; i < lines.length; i++) {
			String[] fields = lines[i].split(StringExtractor.COMMA);
				
			CharacterData characterData = new CharacterData();
			characterData.setCharacter(new Character().extractFromString(fields[0], StringExtractor.SPACE));
			characterData.setAllegiance(fields[1].trim());
			characterData.setMessageFileName(fields[2].trim());
			characterDataList.add(characterData);
			
			List<String> messageLines = FileHelper.loadMessages(fields[2].trim());
			List<Message> messages = new ArrayList<>();
			
            for (int j = 1; j < messageLines.size(); j++) {
                if(messageLines.get(j).isBlank() || messageLines.get(j).isEmpty())
                	continue;
                else
                	messages.add(new Message().extractFromString(messageLines.get(j), StringExtractor.COMMA));
            }
            characterMessages.put(characterData.getCharacter(), messages);
        }	
	}
	
	public List<Character> getCharacters(){
		List<Character> characters = new ArrayList<Character>();
		for(CharacterData characterdata: characterDataList) {
			characters.add(characterdata.getCharacter());
		}
		return characters;
	}
	
	private List<Message> getMessagesFromCharacter(Character character){
		return this.characterMessages.get(character);
	}
	
	private List<Message> characterToCharacterMessages(Character character1, Character character2) {
		List<Message> messages = new ArrayList<Message>();
		for(Message message : getMessagesFromCharacter(character1)) {
			if(message.getReceiver().equals(character2)) {
				messages.add(message);
			}
		}
		return messages;
	}
	
	public void printCharacterMessages(Character character) {
		List<Message> messages = getMessagesFromCharacter(character);
		System.out.println("All the messages from " + character.toString() + ":\n");
		for(Message message : messages) {
			System.out.println(message.toString());
		}	
	}
	
	public void printNumberOfMessagesByCharacter() {
		for (Character character : characterMessages.keySet()) {
			int numberOfMessages = characterMessages.get(character).size();
			System.out.println(character.toString() + " had " +
			numberOfMessages + " messages. ");		
		}
	}
	
	private int countRegexInString(String regex, String messageData) {
	    int counter = 0;
	    Pattern pattern = Pattern.compile(regex);
	    Matcher matcher = pattern.matcher(messageData);
	    while (matcher.find()) {
	        counter++;
	    }
	    return counter;
	}
	
	private int countEmojisByCharacterAndType(Character character, EmojiType emojiType) {
		List<Message> messages = getMessagesFromCharacter(character);
		int counter = 0;
		for(Message message : messages) {
			counter += countRegexInString(emojiType.getRegex(), message.getContent());
		}
		return counter;		
	}
	
	private int countEmojisFromCharacterToCharacter(Character character1, Character character2, EmojiType emojiType) {
		List<Message> messages = characterToCharacterMessages(character1, character2);
		int counter = 0;
		for(Message message : messages) {
			if(message.getContent().matches(emojiType.getRegex()))
				counter++;
		}
		return counter;
	}
	
	private int happinessIndexOf(Character character) {
		int happyEmojis = countEmojisByCharacterAndType(character, EmojiType.HAPPY);
		int sadEmojis = countEmojisByCharacterAndType(character, EmojiType.SAD);
		return happyEmojis - sadEmojis;
	}

	
	public void printCharacterHappiness(Character character) {		
		int happyEmojis = countEmojisByCharacterAndType(character, EmojiType.HAPPY);
		int sadEmojis = countEmojisByCharacterAndType(character, EmojiType.SAD);
		System.out.print(character.toString() + " had " + happyEmojis 
				+ " happy and " + sadEmojis + " sad emoticons: ");
		if(happinessIndexOf(character) > 0)
			System.out.println("more happy than sad. ");
		else if(happinessIndexOf(character) < 0)
			System.out.println("more sad than happy. ");
		else
			System.out.println("equally happy and sad. ");
		
	}
	
	public void printCharacterWithMostDisposition(EmojiType emojiType) {
		Character mostDispositionCharacter = null;
		int mostDispositionCounter = 0;
		for(Character character : characterMessages.keySet()) {
			int dispositionCounter = countEmojisByCharacterAndType(character, emojiType);
			if(dispositionCounter>mostDispositionCounter) {
				mostDispositionCounter = dispositionCounter;
				mostDispositionCharacter = character;
			}
		}
		System.out.println("The " + emojiType.getMood() + "est character is " 
		+ mostDispositionCharacter.toString() + ".");
	}
	
	public void printCharacterToCharacterDisposition(Character character1, Character character2, EmojiType emojiType) {
		int emojisFromCharacter1ToCharacter2 = countEmojisFromCharacterToCharacter(character1, character2, emojiType);
		int emojisFromCharacter2ToCharacter1 = countEmojisFromCharacterToCharacter(character2, character1, emojiType);
		if(emojisFromCharacter1ToCharacter2 > emojisFromCharacter2ToCharacter1)
			System.out.println(character1.toString() + " " + emojiType.getMood() + "s " + character2.toString() 
			+ " more than vice versa. ");
		else if(emojisFromCharacter1ToCharacter2 < emojisFromCharacter2ToCharacter1)
			System.out.println(character2.toString() + " " + emojiType.getMood() + "s " + character1.toString() 
			+ " more than vice versa. ");
		else
			System.out.println(character1.toString() + " and " + character2.toString() + " love each other equally. ");
		
		
		
	}

	

}
